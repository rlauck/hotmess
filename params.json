{"name":"Hotmess","tagline":"Hotmess.js fast, tiny and powerful javascript templates","body":"#Hotmess.js\r\n\r\nHotmess is a javascript templating engine focused on minimalism and performance.\r\n\r\n##Features\r\n\r\n* Stupid fast!\r\n* Tiny! ~60 loc and <1kb minimized.\r\n* Use in the client and server.\r\n* Logic-less! With support for list iteration, \"truthy\" conditionals and default values.\r\n* Partials! Reuse templates and keep them concise.\r\n\r\n##Usage\r\n\r\nInclude the script in your page:\r\n\r\n    <script src=\"https://rawgithub.com/rlauck/hotmess/master/hotmess.js\">\r\n\r\nCreating and rendering a template is as simple as:\r\n  \r\n    var tmpl = hotmess.compile(\"<p>I'm afraid I just {{color}} myself</p>\");\r\n    document.body.innerHTML = tmpl( {color:\"blue\"} );\r\n\r\n###Variables\r\n\r\nVariable tags render the named key from the current object/context.\r\nAll variables are HTML escaped but can be rendered raw by prepending an {{&amp; ampersand }}.\r\n\r\nCode:\r\n\r\n    var data = {\r\n      name: \"Gob Bluth\",\r\n      job: \"<b>magician</b>\"\r\n    };\r\n    var out = hotmess.compile( \"A {{&job}} never reveals his secrets! -{{name}}\" )(data);\r\n\r\nOutput:\r\n\r\n    A <b>Magician</b> never reveals his secrets! -Gob Bluth\r\n    \r\nIf a variable does not exist, nothing will be rendered unless you provide a default value.\r\nSurround default strings with quotes, or leave them off to name a different key as the default.\r\n\r\nCode:\r\n\r\n    var tmpl = hotmess.compile( '{{yep}}, {{nope : \"missing\"}}, {{nope:meh}}' );\r\n    var out = tmpl({\r\n      yep: \"yep\",\r\n      meh: \"well... ok\"\r\n    });\r\n\r\nOutput:\r\n\r\n    yep, missing, well... ok\r\n\r\n###Arrays\r\n\r\nArrays are iterated with the {{~list}} tag. A plain {{~}} tag closes the list and the inner template\r\nis repeated for each array element. The context in the inner template is set to each array element and\r\nis accessible with the {{.}} tag. Properties of the parent tag are accessed with\r\nthe ../ prefix such as {{../parent_property}}.\r\n\r\nFirst a simple example.\r\n\r\nCode:\r\n\r\n    var tmpl = hotmess.compile( \"{{~names}}{{.}} {{~}}\" );\r\n    document.body.innerHTML = tmpl( { names: [\"George\", \"Buster\", \"Lucille\"] } );\r\n    \r\nOutput:\r\n\r\n    George Buster Lucille\r\n\r\n------\r\n\r\nNow something more complex.\r\n    \r\nTemplate:\r\n\r\n    <ul>\r\n    {{~ names}}\r\n      <li style=\"{{ style() }}\">{{name}} {{../surname}}</li>\r\n    {{~}}\r\n    </ul>\r\n\r\nData:\r\n\r\n    {\r\n      surname: \"Bluth\",\r\n      \r\n      names: [\r\n        { name: \"George\", gender: \"m\" },\r\n        { name: \"Buster\", gender: \"m\" },\r\n        { name: \"Lucille\", gender: \"f\" }\r\n      ],\r\n      \r\n      style: function(value, i) {\r\n        // yep, you can call methods too\r\n        \r\n        var style = value.gender == \"f\" ? \"color:pink;\" : \"color:blue;\";\r\n        \r\n        // bold every other row\r\n        if( i % 2 == 0 ){\r\n          style += \"font-weight:bold;\";\r\n        }\r\n        \r\n        return style;\r\n      }\r\n    }\r\n    \r\nOutput:\r\n\r\n    <ul>\r\n      <li style=\"color:blue;font-weight:bold;\">George Bluth</li>\r\n      <li style=\"color:blue;\">Buster Bluth</li>\r\n      <li style=\"color:pink;font-weight:bold;\">Lucille Bluth</li>\r\n    </ul>\r\n    \r\n###Conditionals\r\n\r\nSyntax: {{? test}} test is truthy {{?? test2}} test2 is truthy {{??}} else case {{?}}\r\n\r\nTODO: create examples\r\n\r\n###Partials\r\n\r\nAny template may be called from within another template. There are some caveats currently:\r\n\r\n* The partial template must be compiled and registered before the parent template is rendered.\r\n* No effort is made to prevent circular references, so infinite loops are possible.\r\n\r\nSyntax: {{>partial}}\r\n\r\nTODO: create examples\r\n\r\n##Benchmarks\r\n\r\nI hope to create some more rigorous benchmarks but for now I created a variant of the popular\r\n[Javascript template language shootoff jsPerf](http://jsperf.com/dom-vs-innerhtml-based-templating/836).\r\n\r\n##About\r\n\r\nI began this project to see how small and fast I could make a full featured template function.\r\nHotmess is MIT Licensed and based on [doT](https://github.com/olado/doT) and [Mustache](https://github.com/janl/mustache.js).\r\n\r\n    \r\n    \r\n    \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}